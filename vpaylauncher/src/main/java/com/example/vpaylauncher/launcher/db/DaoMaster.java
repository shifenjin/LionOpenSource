package com.example.vpaylauncher.launcher.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.yunnex.vpay.launcher.utils.LauncherUtils;
import com.yunnex.vpay.util.HardwareConfigUtils;
import com.yunnex.vpay.view.dcb.DCBLauncherConfig;
import com.yunnex.vpay.view.dcb.DCBLauncherLayout;
import com.yunnex.vpay.view.dcb.DCBLauncherUtils;
import com.yunnex.vpay.view.vpay.VPayLauncherConfig;
import com.yunnex.vpay.view.vpay.VPayLauncherLayout;
import com.yunnex.vpay.view.vpay.VPayLauncherUtils;

import java.util.List;
import java.util.Set;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster
{
	public static final int SCHEMA_VERSION = 1;

	/**
	 * Creates underlying database table using DAOs.
	 */
	public static void createAllTables(SQLiteDatabase db, boolean ifNotExists)
	{
		CellInfoDao.createTable(db, ifNotExists);
	}

	/**
	 * Drops underlying database table using DAOs.
	 */
	public static void dropAllTables(SQLiteDatabase db, boolean ifExists)
	{
		CellInfoDao.dropTable(db, ifExists);
	}

	public static abstract class OpenHelper extends SQLiteOpenHelper
	{

		public OpenHelper(Context context, String name, CursorFactory factory)
		{
			super(context, name, factory, SCHEMA_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db)
		{
			Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
			createAllTables(db, false);
		}
	}

	/**
	 * WARNING: Drops all table on Upgrade! Use only during development.
	 */
	public static class DevOpenHelper extends OpenHelper
	{
		private Context mContext;

		public DevOpenHelper(Context context, String name, CursorFactory factory)
		{
			super(context, name, factory);
			mContext = context;
		}

		@Override
		public void onCreate(SQLiteDatabase db)
		{
			super.onCreate(db);
			upgradeAction(db, 0, SCHEMA_VERSION);
		}

		public void upgradeAction(SQLiteDatabase db, int oldVersion, int newVersion)
		{
			DaoMaster daoMaster = new DaoMaster(db);
			DaoSession daoSession = daoMaster.newSession();
			CellInfoDao cellInfoDao = daoSession.getCellInfoDao();
			try
			{
				switch (oldVersion)
				{
					case 0:
					{

					}
					case 1:
					{
						HardwareConfigUtils.Product configLauncherMode = HardwareConfigUtils.getConfigLauncherMode();
						switch (configLauncherMode)
						{
							case VPay:
							{
								cellInfoDao.deleteAll();
								// 扫码、卡券、商品订单、拉客、店内点餐、外卖、智能小二、排队、预约中心、掌柜应用、设置、帮助中心
								int positionIndex = 0;
								int screenIndex = VPayLauncherLayout.MAIN_SCREEN;
								Set<String> operatorBlackList = LauncherUtils.getOperatorBlackList(mContext);

								List<CellInfo> insetCellInfoList = LauncherUtils.getCellInfoByPkgName(mContext, VPayLauncherUtils.getLauncherInsetPkgNameList());

								for (CellInfo cellInfo : insetCellInfoList)
								{
									if (!operatorBlackList.contains(cellInfo.getPkgName()))
									{
										if (positionIndex >= VPayLauncherConfig.mainScreenCellCapacity && screenIndex == VPayLauncherLayout.MAIN_SCREEN)
										{
											screenIndex = VPayLauncherLayout.SIDE_SCREEN;
											positionIndex = 0;
										}
										CellInfo appInfo = new CellInfo(null, cellInfo.getActivityName(), cellInfo.getPkgName(), screenIndex, positionIndex, 0);

										daoSession.insert(appInfo);
										positionIndex++;
									}
								}

								if (screenIndex == VPayLauncherLayout.MAIN_SCREEN)
								{
									positionIndex = 0;
									screenIndex = VPayLauncherLayout.SIDE_SCREEN;
								}
								List<CellInfo> cellInfoList = LauncherUtils.getCellInfoFromSystemExceptBlacklist(mContext);
								if (cellInfoList != null)
								{
									for (CellInfo cellInfo : cellInfoList)
									{
										String activityName = cellInfo.getActivityName();
										if (activityName != null && cellInfoDao.queryBuilder().where(CellInfoDao.Properties.ActivityName.eq(activityName)).unique() == null && !operatorBlackList.contains(activityName))
										{
											cellInfo.setScreenIndex(screenIndex);
											cellInfo.setPositionIndex(positionIndex);
											cellInfo.setMsgNum(0);
											daoSession.insert(cellInfo);
											positionIndex++;
										}
									}
								}

								break;
							}
							case DCB:
							{
								cellInfoDao.deleteAll();
								// 扫码、智慧餐厅、卡券、设置、帮助中心、掌柜应用
								int positionIndex = 0;
								int screenIndex = DCBLauncherLayout.MAIN_SCREEN;
								Set<String> operatorBlackList = LauncherUtils.getOperatorBlackList(mContext);

								List<CellInfo> insetCellInfoList = LauncherUtils.getCellInfoByPkgName(mContext, DCBLauncherUtils.getLauncherInsetPkgNameList());

								for (CellInfo cellInfo : insetCellInfoList)
								{
									if (!operatorBlackList.contains(cellInfo.getPkgName()))
									{
										if (positionIndex >= DCBLauncherConfig.mainScreenCellCapacity && screenIndex == DCBLauncherLayout.MAIN_SCREEN)
										{
											screenIndex = DCBLauncherLayout.SIDE_SCREEN;
											positionIndex = 0;
										}
										CellInfo appInfo = new CellInfo(null, cellInfo.getActivityName(), cellInfo.getPkgName(), screenIndex, positionIndex, 0);

										daoSession.insert(appInfo);
										positionIndex++;
									}
								}

								if (screenIndex == DCBLauncherLayout.MAIN_SCREEN)
								{
									positionIndex = 0;
									screenIndex = DCBLauncherLayout.SIDE_SCREEN;
								}
								List<CellInfo> cellInfoList = LauncherUtils.getCellInfoFromSystemExceptBlacklist(mContext);
								if (cellInfoList != null)
								{
									for (CellInfo cellInfo : cellInfoList)
									{
										String activityName = cellInfo.getActivityName();
										if (activityName != null && cellInfoDao.queryBuilder().where(CellInfoDao.Properties.ActivityName.eq(activityName)).unique() == null && !operatorBlackList.contains(activityName))
										{
											cellInfo.setScreenIndex(screenIndex);
											cellInfo.setPositionIndex(positionIndex);
											cellInfo.setMsgNum(0);
											daoSession.insert(cellInfo);
											positionIndex++;
										}
									}
								}

								break;
							}
							default:
						}
					}
					default:
						break;
				}
			}
			finally
			{
				daoSession.clear();
			}
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)
		{
			Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
			//            dropAllTables(db, true);
			//            onCreate(db);
			upgradeAction(db, oldVersion, newVersion);

		}
	}

	public DaoMaster(SQLiteDatabase db)
	{
		super(db, SCHEMA_VERSION);
		registerDaoClass(CellInfoDao.class);
	}

	public DaoSession newSession()
	{
		return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
	}

	public DaoSession newSession(IdentityScopeType type)
	{
		return new DaoSession(db, type, daoConfigMap);
	}

}
